{"meta":{"title":"___差池","subtitle":null,"description":"锄禾日当午，粒粒皆辛苦。","author":"欧阳修","url":"http://chiwahbb.club","root":"/"},"pages":[],"posts":[{"title":"DHCP+FTP网络服务","slug":"DHCP-FTP网络服务","date":"2020-07-02T12:54:31.000Z","updated":"2020-07-02T12:55:26.673Z","comments":true,"path":"2020/07/02/DHCP-FTP网络服务/","link":"","permalink":"http://chiwahbb.club/2020/07/02/DHCP-FTP%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/","excerpt":"请描述通过DHCP服务器获取IP地址的过程DHCP租约过程分为四部曲： 客户机请求IP（客户机发DHCPDISCOVER广播包） 服务器响应（服务器发DHCPOFFER广播包） 客户机选择IP（客户机发DHCPREQUEST广播包） 服务器确定租约（服务器发DHCPACK/DHCPNAK广播包）","text":"请描述通过DHCP服务器获取IP地址的过程DHCP租约过程分为四部曲： 客户机请求IP（客户机发DHCPDISCOVER广播包） 服务器响应（服务器发DHCPOFFER广播包） 客户机选择IP（客户机发DHCPREQUEST广播包） 服务器确定租约（服务器发DHCPACK/DHCPNAK广播包） DHCP续租两部曲： 客户机续租IP（客户机发DHCPREQUEST） 服务器确定租约/不续（服务器发DHCPACK/DHCPNAK） DHCP租用失败： 如果DHCP客户机无法找到DHCP服务器，它将从TCP/IP的B类网段169.254.0.0/16中挑选一个IP地址作为自己的临时IP地址，继续每隔5分钟尝试与DHCP服务器进行通讯，一旦与DHCP服务器取得联系，则客户机放弃自动配置的临时IP地址，而使用DHCP服务器分配的IP地址 DHCP客户机收到DHCP服务器回应的ACK报文后，通过地址冲突检测（arp）发现服务器分配的地址冲突或者由于其他原因导致不能使用，则发送DECLINE报文，通知服务器所分配的IP地址不可用 简单描述FTP的主动模式和被动模式的区别？ 主动模式 FTP客户端从任意的非特殊的端口（N&gt;1023）连入到FTP服务器的命令端口–21端口。然后客户端在N+1（N+1 &gt;= 1024）端口监听，并且通过N+1（N+1&gt;=1024）端口发送命令给FTP服务器。服务器会反过来连接用户本地指定的数据端口，比如20端口。 主动模式的FTP的主要问题实际上落在客户端。FTP的客户端并不会主动连接到服务器的数据端口，而是是告诉服务器它正在监听哪个端口，然后服务器发起连接到客户端上指定的端口。但是，这样的连接有时候会被客户端的防火墙阻止。 被动模式 为了解决服务器主动发起到客户端连接会被阻止的问题，另一种更完善的工作模式出现了，它就是 FTP 的被动模式，缩写作 PASV，它工作的前提是客户端明确告知 FTP 服务器它使用被动模式。 在被动模式的 FTP 中，客户端启动到服务器的两个连接，解决了防火墙阻止从服务器到客户端的传入数据端口连接的问题。FTP 连接建立后，客户端在本地打开两个随机的非系统端口 N 和 N + 1(N &gt; 1023)。第一个端口连接服务器上的 21 端口，但是客户端这次将会发出 PASV 命令，也就是不允许服务器连接回其数据端口。这样，服务器随后会打开一个随机的非系统端口 P (P &gt; 1023)，并将 P 发送给客户端作为 PASV 命令的响应。然后客户端启动从端口 N+1 到端口 P 的连接来传输数据","categories":[],"tags":[]},{"title":"Apache网络服务","slug":"Apache网络服务","date":"2020-07-02T12:00:12.000Z","updated":"2020-07-02T12:39:10.959Z","comments":true,"path":"2020/07/02/Apache网络服务/","link":"","permalink":"http://chiwahbb.club/2020/07/02/Apache%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/","excerpt":"公司里有一台服务器，需要在上面跑两个网站，并且其中一个网站需要更换新域名，请问如何处理？web1：www.a.comweb2：www.b.com-------&gt;www.d.com","text":"公司里有一台服务器，需要在上面跑两个网站，并且其中一个网站需要更换新域名，请问如何处理？web1：www.a.comweb2：www.b.com-------&gt;www.d.com 虚拟主机 基于IP 基于IP+端口 基于域名 1234cat &#x2F;etc&#x2F;hosts10.12.7.12 www.a.com10.12.7.12 www.b.com10.12.7.12 www.d.com 12345678910111213141516171819202122NameVirtualhost *:80&lt;Virtualhost *:80&gt; DocumentRoot &#x2F;var&#x2F;www&#x2F;html&#x2F;www.a.com ServerName www.b.com&lt;&#x2F;Virtualhost&gt;&lt;Virtualhost *:80&gt; DocumentRoot &#x2F;var&#x2F;www&#x2F;html&#x2F;www.b.com ServerName www.b.com#rewrite地址重写 &lt;IfModule mod_rewrite.c&gt; RewriteEnfine on RewriteCond %&#123;HTTP_HOST&#125; ^www.b.com RewriteRule ^(.*)$ http:&#x2F;&#x2F;www.d.com&#x2F;$1 [R&#x3D;permanent,L] &lt;&#x2F;IfModule&gt;&lt;&#x2F;Virtualhost&gt;&lt;Virtualhost *:80&gt; DocumentRoot &#x2F;var&#x2F;www&#x2F;html&#x2F;www.b.com ServerName www.d.com&lt;&#x2F;Virtualhost&gt; 简述Apache的三种工作模式查看方式#httpd -V | grep -i “server mpm”指定方式:在编译时,在选项中指定,–with-mpm=xxxPrefork MPM 默认的工作模式是Prefork MPM，这种模式采用的是预派生子进程方式，用单独的子进程来处理请求，子进程间互相独立，互不影响，大大的提高了稳定性，但每个进程都会占用内存，所以消耗系统资源过高； Prefork MPM 工作原理：控制进程Master首先会生成“StartServers”个进程，“StartServers”可以在Apache主配置文件里配置，然后为了满足“MinSpareServers”设置的最小空闲进程个数，会建立一个空闲进程，等待一秒钟，继续创建两个空闲进程，再等待一秒钟，继续创建四个空闲进程，以此类推，会不断的递归增长创建进程，最大同时创建32个空闲进程，直到满足“MinSpareServers”设置的空闲进程个数为止。Apache的预派生模式不必在请求到来的时候创建进程，这样会减小系统开销以增加性能，不过PreforkMPM是基于多进程的模式工作的，每个进程都会占用内存，这样资源消耗也较高。 Worker MPM Worker MPM是Apche 2.0版本中全新的支持多进程多线程混合模型的MPM，由于使用线程来处理HTTP请求，所以效率非常高，而对系统的开销也相对较低，Worker MPM也是基于多进程的，但是每个进程会生成多个线程，由线程来处理请求，这样可以保证多线程可以获得进程的稳定性； Worker MPM工作原理： 控制进程Master在最初会建立“StartServers”个进程，然后每个进程会创建“ThreadPerChild”个线程，多线程共享该进程内的资源，同时每个线程独立的处理HTTP请求，为了不在请求到来的时候创建线程，WorkerMPM也可以设置最大最小空闲线程，WorkerMPM模式下同时处理的请求=ThreadPerChild*进程数，也就是MaxClients，如果服务负载较高，当前进程数不满足需求，Master控制进程会fork新的进程，最大进程数不能超过ServerLimit数，如果需要，可以调整这些对应的参数，比如，如果要调整StartServers的数量，则也要调整 ServerLimit的值 Event MPM 这个是 Apache中最新的模式，在现在版本里的已经是稳定可用的模式。它和 worker模式很像，最大的区别在于，它解决了keep-alive场景下，长期被占用的线程的资源浪费问题（某些线程因为被keep-alive，挂在那里等待，中间几乎没有请求过来，一直等到超时）。 event MPM中，会有一个专门的线程来管理这些 keep-alive 类型的线程，当有真实请求过来的时候，将请求传递给服务线程，执行完毕后，又允许它释放。这样，一个线程就能处理几个请求了，实现了异步非阻塞。 event MPM在遇到某些不兼容的模块时，会失效，将会回退到worker模式，一个工作线程处理一个请求。官方自带的模块，全部是支持event MPM的。","categories":[],"tags":[]},{"title":"工作中常见的Apache优化策略","slug":"工作中常见的Apache优化策略","date":"2020-07-01T06:50:41.000Z","updated":"2020-07-02T12:39:21.607Z","comments":true,"path":"2020/07/01/工作中常见的Apache优化策略/","link":"","permalink":"http://chiwahbb.club/2020/07/01/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84Apache%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5/","excerpt":"设置Apache的日志轮替和切割规则，防止日志文件过大美化错误页面，将错误页面重定向到首页或指定页面屏蔽Apache的版本等信息，防止别人获取Apache的相应版本配置静态缓存，减少对服务器的访问压力禁止解析指定目录下的页面程序，比如upload，禁止解析用户上传的脚本文件","text":"设置Apache的日志轮替和切割规则，防止日志文件过大美化错误页面，将错误页面重定向到首页或指定页面屏蔽Apache的版本等信息，防止别人获取Apache的相应版本配置静态缓存，减少对服务器的访问压力禁止解析指定目录下的页面程序，比如upload，禁止解析用户上传的脚本文件 有哪些技术可以提高网站的安全和效率 Apache服务器的安全 Apache服务器的效率 日志轮替利用apache自带的rotatelogs工具进行日志切割，保证单个日志文件不要太大1CustomLog &quot;|&#x2F;bin&#x2F;rotatelogs -l &#x2F;wwwlogs&#x2F;access_%Y%m%d.log 86400&quot; combined 美化错误页面可以将404 500 等错误信息页面重定向到网站首页或其他页面，提升用户体验123vim httpd.confErrorDocument 404 http:&#x2F;&#x2F;www.a.com 屏蔽apache版本等敏感信息开启子配置文件调用12vim httpd.confInclude conf&#x2F;extra&#x2F;httpd-default.conf 修改配置文件中默认显示的信息1234567vim httpd-default.confServerTokens prod 显示 &quot;Server: Apache&quot;ServerTokens Major 显示 &quot;Server: Apache&#x2F;2&quot;ServerTokens Minjor 显示 &quot;Server: Apache&#x2F;2.2&quot;ServerTokens Min 显示 &quot;Server: Apache&#x2F;2.2.17&quot;ServerTokens OS 显示 &quot;Server: Apache&#x2F;2.2.17 (Unix)&quot;ServerTokens Full 显示 &quot;Server: Apache&#x2F;2.2.17 (Unix) PHP&#x2F;5.3.5&quot; 配置静态缓存此模块默认未启用，请手动启动此模块一般写到指定的某一个网站标签中123456789vim httpd.conf&lt;IfModule mod_expires.c&gt; ExpiresActive on ExpiresByType image&#x2F;gif &quot;access plus 1 days&quot; ExpiresByType image&#x2F;jpeg &quot;access plus 24 hours&quot; ExpiresByType image&#x2F;png &quot;access plus 1 days&quot; ExpiresByType text&#x2F;css &quot;now plus 2 hours&quot; ExpiresDefault &quot;now plus 0 min&quot;&lt;&#x2F;IfModule&gt; 禁止解析PHP新增目录权限标签123456789vim httpd.conf&lt;Directory &quot;&#x2F;www&#x2F;a.com&#x2F;uploads&quot;&gt; Options FollowSymLinks AllowOverride None Order allow,deny Allow from all php_flag engine off&lt;&#x2F;Directory&gt;","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-07-01T06:35:35.751Z","updated":"2020-07-01T06:35:35.751Z","comments":true,"path":"2020/07/01/hello-world/","link":"","permalink":"http://chiwahbb.club/2020/07/01/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}