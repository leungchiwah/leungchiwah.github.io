[{"title":"Apache网络服务","url":"/2020/07/02/Apache%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/","content":"公司里有一台服务器，需要在上面跑两个网站，并且其中一个网站需要更换新域名，请问如何处理？web1：www.a.comweb2：www.b.com-------&gt;www.d.com\n\n虚拟主机\n基于IP\n基于IP+端口\n基于域名\n\ncat &#x2F;etc&#x2F;hosts10.12.7.12 www.a.com10.12.7.12 www.b.com10.12.7.12 www.d.com\n\nNameVirtualhost *:80&lt;Virtualhost *:80&gt;  DocumentRoot &#x2F;var&#x2F;www&#x2F;html&#x2F;www.a.com  ServerName www.b.com&lt;&#x2F;Virtualhost&gt;&lt;Virtualhost *:80&gt;  DocumentRoot &#x2F;var&#x2F;www&#x2F;html&#x2F;www.b.com  ServerName www.b.com#rewrite地址重写  &lt;IfModule mod_rewrite.c&gt;  RewriteEnfine on  RewriteCond %&#123;HTTP_HOST&#125; ^www.b.com  RewriteRule ^(.*)$ http:&#x2F;&#x2F;www.d.com&#x2F;$1 [R&#x3D;permanent,L]  &lt;&#x2F;IfModule&gt;&lt;&#x2F;Virtualhost&gt;&lt;Virtualhost *:80&gt;  DocumentRoot &#x2F;var&#x2F;www&#x2F;html&#x2F;www.b.com  ServerName www.d.com&lt;&#x2F;Virtualhost&gt;\n\n\n\n简述Apache的三种工作模式查看方式#httpd -V | grep -i “server mpm”指定方式:在编译时,在选项中指定,–with-mpm=xxxPrefork MPM\n默认的工作模式是Prefork MPM，这种模式采用的是预派生子进程方式，用单独的子进程来处理请求，子进程间互相独立，互不影响，大大的提高了稳定性，但每个进程都会占用内存，所以消耗系统资源过高；\nPrefork MPM 工作原理：控制进程Master首先会生成“StartServers”个进程，“StartServers”可以在Apache主配置文件里配置，然后为了满足“MinSpareServers”设置的最小空闲进程个数，会建立一个空闲进程，等待一秒钟，继续创建两个空闲进程，再等待一秒钟，继续创建四个空闲进程，以此类推，会不断的递归增长创建进程，最大同时创建32个空闲进程，直到满足“MinSpareServers”设置的空闲进程个数为止。Apache的预派生模式不必在请求到来的时候创建进程，这样会减小系统开销以增加性能，不过PreforkMPM是基于多进程的模式工作的，每个进程都会占用内存，这样资源消耗也较高。\n\nWorker MPM\nWorker MPM是Apche 2.0版本中全新的支持多进程多线程混合模型的MPM，由于使用线程来处理HTTP请求，所以效率非常高，而对系统的开销也相对较低，Worker MPM也是基于多进程的，但是每个进程会生成多个线程，由线程来处理请求，这样可以保证多线程可以获得进程的稳定性；\nWorker MPM工作原理： 控制进程Master在最初会建立“StartServers”个进程，然后每个进程会创建“ThreadPerChild”个线程，多线程共享该进程内的资源，同时每个线程独立的处理HTTP请求，为了不在请求到来的时候创建线程，WorkerMPM也可以设置最大最小空闲线程，WorkerMPM模式下同时处理的请求=ThreadPerChild*进程数，也就是MaxClients，如果服务负载较高，当前进程数不满足需求，Master控制进程会fork新的进程，最大进程数不能超过ServerLimit数，如果需要，可以调整这些对应的参数，比如，如果要调整StartServers的数量，则也要调整 ServerLimit的值\n\nEvent MPM\n这个是 Apache中最新的模式，在现在版本里的已经是稳定可用的模式。它和 worker模式很像，最大的区别在于，它解决了keep-alive场景下，长期被占用的线程的资源浪费问题（某些线程因为被keep-alive，挂在那里等待，中间几乎没有请求过来，一直等到超时）。\nevent MPM中，会有一个专门的线程来管理这些 keep-alive 类型的线程，当有真实请求过来的时候，将请求传递给服务线程，执行完毕后，又允许它释放。这样，一个线程就能处理几个请求了，实现了异步非阻塞。\nevent MPM在遇到某些不兼容的模块时，会失效，将会回退到worker模式，一个工作线程处理一个请求。官方自带的模块，全部是支持event MPM的。\n\n"},{"title":"DHCP+FTP网络服务","url":"/2020/07/02/DHCP-FTP%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/","content":"请描述通过DHCP服务器获取IP地址的过程DHCP租约过程分为四部曲：\n客户机请求IP（客户机发DHCPDISCOVER广播包）\n\n服务器响应（服务器发DHCPOFFER广播包）\n\n客户机选择IP（客户机发DHCPREQUEST广播包）\n\n服务器确定租约（服务器发DHCPACK/DHCPNAK广播包）\n\nDHCP续租两部曲：\n客户机续租IP（客户机发DHCPREQUEST）\n\n服务器确定租约/不续（服务器发DHCPACK/DHCPNAK）\n\n\nDHCP租用失败：\n如果DHCP客户机无法找到DHCP服务器，它将从TCP/IP的B类网段169.254.0.0/16中挑选一个IP地址作为自己的临时IP地址，继续每隔5分钟尝试与DHCP服务器进行通讯，一旦与DHCP服务器取得联系，则客户机放弃自动配置的临时IP地址，而使用DHCP服务器分配的IP地址\n\nDHCP客户机收到DHCP服务器回应的ACK报文后，通过地址冲突检测（arp）发现服务器分配的地址冲突或者由于其他原因导致不能使用，则发送DECLINE报文，通知服务器所分配的IP地址不可用\n\n\n简单描述FTP的主动模式和被动模式的区别？\n主动模式\n\n\nFTP客户端从任意的非特殊的端口（N&gt;1023）连入到FTP服务器的命令端口–21端口。然后客户端在N+1（N+1 &gt;= 1024）端口监听，并且通过N+1（N+1&gt;=1024）端口发送命令给FTP服务器。服务器会反过来连接用户本地指定的数据端口，比如20端口。\n主动模式的FTP的主要问题实际上落在客户端。FTP的客户端并不会主动连接到服务器的数据端口，而是是告诉服务器它正在监听哪个端口，然后服务器发起连接到客户端上指定的端口。但是，这样的连接有时候会被客户端的防火墙阻止。\n\n\n被动模式\n\n\n为了解决服务器主动发起到客户端连接会被阻止的问题，另一种更完善的工作模式出现了，它就是 FTP 的被动模式，缩写作 PASV，它工作的前提是客户端明确告知 FTP 服务器它使用被动模式。\n在被动模式的 FTP 中，客户端启动到服务器的两个连接，解决了防火墙阻止从服务器到客户端的传入数据端口连接的问题。FTP 连接建立后，客户端在本地打开两个随机的非系统端口 N 和 N + 1(N &gt; 1023)。第一个端口连接服务器上的 21 端口，但是客户端这次将会发出 PASV 命令，也就是不允许服务器连接回其数据端口。这样，服务器随后会打开一个随机的非系统端口 P (P &gt; 1023)，并将 P 发送给客户端作为 PASV 命令的响应。然后客户端启动从端口 N+1 到端口 P 的连接来传输数据\n\n"},{"title":"DNS网络服务","url":"/2020/07/05/DNS%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/","content":"请描述用户访问网站时DNS的解析过程递归查询\n客户机首先查看本地hosts文件是否有解析记录，有则直接用来访问web server\n没有则向网卡中记录的首选DNS（本地DNS）发起查询请求\n本地DNS若有记录则返回给客户端，客户端接收到后直接访问web server\n迭代查询\n若没有，则本地DNS向根域服务器发起请求，请求解析对应顶级域的IP地址\n本地DNS得到顶级域服务器IP后，再想顶级域服务器发起请求，请求解析权威DNS服务器的IP地址\n本地DNS服务器获取到权威DNS服务器IP地址后，再向其查询具体的完整域名的对应解析记录\n最终本地DNS将查询到的对应域名的解析记录发送给客户端，并在本地记录一份\n\n==权威DNS==是经上一级授权对域名进行解析的DNS服务器，同时它可以把解析授权转授给其他服务器==递归DNS==负责接受用户对任何域名的查询，并返回结果给用户，它可以缓存结果避免用户再向上查询==智能DNS==就是将对用户发起的查询进行判断出是哪个运营商的用户查询，然后将请求转发给你相应的运营商IP处理，减少跨运营访问的时间，提高访问速度"},{"title":"Linux系统资源查看","url":"/2020/07/04/Linux%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E6%9F%A5%E7%9C%8B/","content":"Linux中有许多系统资源需要监管，请问有哪些命令可以查看？性能管理介绍操作系统对硬件资源统一管理，并把资源分配给各个APP使用，资源的使用情况直接影响到程序运行的速度，如果资源使用过高，甚至会造成服务器宕机，直接造成业务中断。实时掌控资源使用情况是每一个系统管理员必备的技能，可以及时发现潜在的问题并及时处理。\n硬件资源管理逻辑\n资源管理的命令\n阈值是多少\n如何定位问题\n如何解决\n\nCPU性能管理查看命令:ps top uptime检查项:进程总数、running队列、load值、使用率\n1）总进程数-0业务进程数≈业务进程数\n\n\n是说明机器压力大，需要升级配置或者通过集群解决不是查看任务管理器中的进程，找是否有陌生进程，不认识的可以百度查询。继续综合后续指标判断\n\n\n2）running队列长度\n\n\n预警线：单核不超过10个\n超过说明CPU资源不足，是否是业务造成的\n是：说明机器压力大，需要升级配置或者通过集群解决不是：找到R队列中的进程，判断是否为恶意程序，恶意程序直接KILL掉，并清除相关连接\n\n\n3）CPU-load值和使用率\n\n\n两个是成正比的，使用率高，负载就高\n预警线:load average 接受范围 3-5【单个核 多核乘以N】,使用率80%\n重点看CPU使用率，单核使用率是100%,多核100*N%\n找到高消耗CPU的进程，判断是否为业务进程\n是      业务说明机器压力大，需要升级配置或者通过集群解决不是   判断是否为恶意程序，恶意程序直接KILL掉，并清除相关连接\n\n磁盘性能管理查看命令:df iostat iotop检查项：使用率 IO队列长度\n1）使用率\n\n\n磁盘使用率预警线: 80%\n超过80%应该加磁盘或者清理空间\n\n\n2）IO队列长度\n\n\n队列长度2-3\n检查哪个进程占用了IO，是否为恶意进程\n是:      找到进程Kill掉，清除对应文件不是       优化IO，磁盘阵列或者上存储iostat命令\n\n\n命令语法\niostat [options] [interval] [count]\n命令选项\n-x 详细信息\n-m 以M显示 默认块\n-c 仅显示CPU统计信息.与-d选项互斥.\n-d 仅显示磁盘统计信息.与-c选项互斥.\n-k 以K为单位显示每秒的磁盘请求数,默认单位块.\n-V 打印版本号和帮助信息.\n\n网络性能管理查看命令:iftop检查项: 流入流出峰值阈值:总带宽的80%内存性能管理查看命令：free查看项：物理/swap使用率阈值: 80%/5%内存使用进程:ps"},{"title":"MySQL集群网络服务","url":"/2020/07/09/MySQL%E9%9B%86%E7%BE%A4%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/","content":"MySQL一主多从，主库宕机，如何合理切换到从库，其他从库如何处理？主从服务器原理技术点：bin-log日志\n\n开启主服务器的bin-log日志记录功能，将主服务器的bin-log日志传到从服务器，从服务器根据日志内容将数据还原到本地\n\n主从服务器：\n\n从服务器主动把主服务器上的数据同步到本地（备份）\n\n主从故障切换\n登陆所有从库查看post信息，使用POST最大的作为新的主库，然后将从库提升为新的主库，登陆从库（新的主库）执行stop slave\n\n修改my.cnf配置文件，开启log-bin并重新启动数据库服务，登陆数据库执行reset master ，show masterstatus\\G；查看主库信息，最后创建授权同步用户与权限和网站使用数据库的用户与权限，最后修改对应服务器的IP地址等信息\n\n登陆其他从库，执行change master操作，查看同步状态。\n\n\n\n单台MySQL达到性能瓶颈时，如何击碎性能瓶颈？数据库代理工具：AmoebaAmoeba致力于MySQL的分布式数据库前端代理层，它主要在应用层访问MySQL的时候充当SQL路由功能，专注于分布式数据库代理层（database proxy）开发。具有负载均衡、高可用性、SQL过滤、读写分离、可路由相关的目标数据库、可并发请求多台数据库合并结果，通过Amoeba你能够完成多数据源的高可用、负载均衡、数据切片的功能\n"},{"title":"Nginx网络服务","url":"/2020/07/06/Nginx%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/","content":"Apache和Nginx各有什么优缺点，应该如何选择？Apache的优缺点优点：\nApache的rewrite功能比nginx的要强大\n\n模块非常多。基本想要的功能都能找到模块\n\n存在时间较长，文献较全，bug也相对较少\n\n动静态解析都较稳定\n\n缺点：\n由于工作模式是同步阻塞型，导致资源消耗较高，并发能力较差\n\n\nNginx的优缺点优点：\n轻量级服务，比Apache占用更少的内存及资源\n\n并发能力强，nginx处理请求是异步阻塞的，而apache则是阻塞型的，在高并发下nginx能保持低资源低消耗高性能\n\n高度模块化的设计，编写模块相对简单\n\n社区活跃，各种高性能模块产出迅速\n\n\n缺点：\n动态处理上需要使用fastcgi连接PHP的FPM服务，相比Apache不占优势\n\nApache和Nginx的选择\nNginx适合做静态处理，简单。效率高\n\nApache适合做动态处理，稳定，功能强\n\n并发能力较高的情况下优先选择Nginx，并发要求不高的情况下两者都可以，规模较大的可以使用Nginx作为反向代理，然后将动态请求负载均衡到后端Apache上。\n\n\n\n为什么Nginx的并发能力强，资源消耗低同步和异步\n同步：小明收到快递将送达的短信，在楼下一直等到快递送达\n\n异步：小明收到快递将送达的短信，小明不会下楼去取，而是快递小哥到楼下后，打电话通知小明，然后小明下楼取快递。\n\n\n阻塞和非阻塞\n阻塞：小明收到快递即将送达的信息后，什么事都不做，一直专心等快递送达\n\n非阻塞：小明收到快递即将送达的信息后，等快递的时候，还一边敲代码，一边听歌，等着快递送达的消息。\n\n\nNginx以异步非阻塞方式工作\n客户端发送request，服务器分配work进程来处理\n\n能立即处理完的，处理后work进程释放资源，进行下一个request的处理\n\n不能立即处理完的work进程注册返回事件，然后接着去处理其他request\n\n当之前的request结果返回后，触发返回事件，由空间work进程接着处理\n\n\n通过这种快速处理，快速释放请求的方式，达到同样的配置可以处理更大并发量的目的"},{"title":"Nginx网络服务进阶","url":"/2020/07/09/Nginx%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1%E8%BF%9B%E9%98%B6/","content":"写出几个Nginx的常用模块，并描述其功能http_ssl_module实现服务器加密传输的模块，部署完成后可使用https://协议进行数据传输，保证数据传输过程的安全\nhttp_image_filter_module通过该模块可以实现图片裁剪，将过大的图片裁剪为指定大小的图片，生成缩略图，保证传输速率，该选项默认不开启，需要人为指定。\n\nimage_filter resize $h $w;\n\nhttp_rewrite_moduleNginx的地址重写模块，功能同Apache的一样，可以实现通过正则匹配来完成条件判断，然后进行域名或url重写。例如：多域名、http–&gt;https\nhttp_proxy_moduleNginx的反向代理功能，由于Nginx的高并发特性，很多时候我们都选择使用Nginx作为网站的前置服务器，一般会和upstream模块一起使用，完成压力分摊工作。\nhttp_upstream_moduleNginx的负载均衡模块，一般和http_proxy模块一起使用，用来对后台服务器的任务调度及分配，分配原则可以通过算法进行控制。常见模式:Nginx+Apache、Nginx+Tomcat\n\n请解释Nginx是如何连接PHP进行页面解析的Nginx支持PHP\n\nNginx支持fastCGI功能（默认支持）\n\nPHP编译时开启FPM服务（编译时指定）\n\n在Nginx配置文件中添加匹配规则（匹配后缀是.php）\n\n\n请描述Nginx和Tomcat之间的数据传输过程"},{"title":"OSI七层模型的分层与作用","url":"/2020/07/05/OSI%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%88%86%E5%B1%82%E4%B8%8E%E4%BD%9C%E7%94%A8/","content":"ISO：国际标准化组织OSI：开放式系统互联第七层：应用层为用户提供服务，给用户一个操作界面那对window来讲，打开window图形界面，就是window的应用层。那对Linux来讲，打开命令行系统操作界面，就是Linux的应用层。\n第六层：表示层数据提供表示计算机只能识别二进制的01010，而命令行输入的是ls或者图形界面点击一下鼠标，这些计算机是无法识别的，需要翻译成二进制，计算机才能运算识别，然后再返回执行结果，或者声音图像翻译成二进制，这一连串操作就是由表示层完成的。加密例如ssh的不对称加密压缩例如tar gz bz第五层：会话层确定数据是否需要进行网络传递会话层的作用是确定数据是否需要网络传递，如果是需要网络传递的，例如网络访问，邮件、网页、就会把数据交接给传输层，后面就进行后面一二三四层的网络传递了。如果只是一个本地的保存，例如是一个word文档，会话层就会把它保存在word文档里。由会话层进行分流，一个本地保存，一个是网络传递。第四层：传输层传输层是功能最多的一层\n下面是主要功能：其他功能还有滑动窗口，流量控制\n对报文进行分组（发送时）、组装（接收时）发送时：数据包是有严格的大小规定的，IPV4协议规定，数据包大小不能超过2^16就是65535个字节，那应用层发过来的数据不可能只是65535，到了传输层，就是进行拆分分组，一组65535字节大小。接收时：按照一定顺序把分组的数据包，再组装起来提供传输协议的选择：\nTCP（传输控制协议）：可靠的，面向连接的传输协议（可靠，准确）（慢）\nUDP（用户数据报协议）：不可靠的，面向无连接的传输协议（不可靠）（快）\n\n我们需要在数据包前打一个包头，并且只有两个选择就是TCP和UDP两种传输控制协议（TCP类似打电话、UDP类似发短信）端口封装源端口、目的端口差错检验不管TCP还是UDP都会进行校验，TCP有连接会重发数据包、UDP冇连接直接丢弃数据包第三层：网络层IP地址编址源IP、目的IP （IP全球唯一）\n路由选择\n静态路由\n管理员指定走那一条路线，静态路由的优点，对路由的消耗最小，不需要进行运算，效率高，缺点配置复杂，只适合路由比较少的时候。\n\n\n动态路由\n根据路由协议，自行判断，动态路由的优点，配置简单，只需配置路由协议，缺点是消耗路由的CPU运算，看路由协议选择。\n\n\n\n第二层：数据链路层MAC地址编址同一个广播域里面的，通过MAC地址识别主机MAC地址寻址略差错校验一般不介入第一层：物理层数据实际传输电气特性定义\n\n\n\nTCP/IP 4层模型\nTCP/IP 5层模型\n\n\n\n应用层\n应用层\n\n\n传输层\n传输层\n\n\n网络层\n网络层\n\n\n网络接口层\n数据链路层\n\n\n-\n物理层\n\n\n应用层：HTTP FTP TFTP SMTP SNMP DNS\n传输层：TCP UDP\n网络层：ICMP IGMP IP ARP RARP\n网络接口层：PPP PPPOE\n\n\n 类似面试题目\n\n\nTCP/IP四层模型与作用？\n\n\nTCP协议与UDP协议工作在哪一层，作用是什么？\n\n"},{"title":"Redis服务","url":"/2020/07/09/Redis%E6%9C%8D%E5%8A%A1/","content":"如何保证Reids能永久保存数据?Reids工作原理Reids是一个key-value存储系统,它支持的value类型相对较多,包括string、list、set和zset，这些数据都支持push、pop、add、remove及交并补等操作，而且这些操作都是原子性的，在此基础上，Redis支持各种不同方式的排序。为了保证效率，数据是缓存在内存中的，Redis会周期性的把数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave同步。\n\nReids持久化-RDB在Reids运行时，RDB程序将当前内存中的数据库快照保存到磁盘中，当Reids需要重启时，RDB程序会通过重载RDB文件来还原数据库\n\n保存\n\nrdbSave负责将内存中的数据库数据以RDB格式保存在磁盘中，如果RDB文件已经存在，将会替换已有的RDB文件。保存RDB文件期间会阻塞主进程，这段时间将不能处理新的客户端请求，直到保存完成为止。\n\n读取\n\n当Reids启动时，会根据配置的持久化模式，决定是否读取RDB文件，并将其中的对象加载到内存中\nReids持久化-AOF以协议文本的方式，将所有对数据库进行的写入命令记录到AOF文件，达到记录数据库状态的目的。\n\n保存\n\n\n将客户端请求的命令转换为网络协议格式\n将协议内容字符串追加到变量server.aof_buf中\n当AOF系统达到设定的条件时，会调用aof_fsync（文件描述符号）将数据写入磁盘\n\n\n读取\n\n\nAOF保存的是数据协议格式的数据，所以只要将AOF中的数据转换为命令，模拟客户端重新执行一遍，就可以还原所有的数据库状态\n创建模拟的客户端\n读取AOF保存的文本，还远数据为原命令和原参数。然后使用模拟的客户端发出这个命令个请求。\n继续执行第二步，直到读取完AOF文件\n\n\nAOF重写流程\n\n\nAOF重写完成会向主进程发送一个完成的信号\n会将AOF重写缓存中的数据全部写入到文件中\n用新的AOF文件，覆盖原有的AOF文件\n\n\n如何利用Reids对MySQL进行性能优化？"},{"title":"SSH网络服务","url":"/2020/07/05/SSH%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/","content":"哪些设置能够提升SSH远程管理的安全等级？\n登录验证模式修改为密钥登录\n登录端口修改为非22端口以及制定监听IP\n禁止root用户远程登录\n设置无操作时自动断开连接\n设置登录失败后登录尝试次数为3次\n编写防火墙规则，使用白名单机制放行ssh服务的监听端口\n类似面试题ssh连接时认证时间过长如何解决？\n\n配置文件：/etc/ssh/sshd_config\n\n\n\nUseDNS no\n#取消ssh登录时的dns反向解析请求功能\n\n\n\nscp和rsync进行远程文件复制有什么区别？\n\n\n~\n~\n~\n~\n~\n\n\n\nscp\n全量备份\n文件级传输\n加密传输\n资源消耗低\n\n\nrsync\n差异对比，增量备份\n分块校验，部分传输\n非加密传输\n资源消耗高\n\n\n\nssh的登录验证方式用户口令\n客户端向服务端发起ssh请求\n服务端收到请求，发送公钥给客户端\n客户端输入用户名密码通过公钥加密回传给服务端\n服务端通过私钥解密得到用户名密码和本地进行对比，验证成功，允许登录，否则再次验证\n\n秘钥对登录\n首先在客户端上生成一对秘钥\n将公钥拷贝给服务端一份并重命名为authorized_keys\n客户端向服务端发送一个连接请求，信息包括IP、用户名\n服务端得到客户端的信息后，会到authorized_keys中查找，如果有相应的IP和用户名，服务端会随机生成一个字符串（质疑码）。\n服务端将使用公钥对字符串（质疑码）进行加密，发送给客户端\n客户端得到服务端发来的消息后，客户端会使用私钥进行解密，然后将解密后的字符串（质疑码）发送给服务端\n服务端接收到解密后的字符串会跟先前生成的字符串进行对比，如果一致，就允许客户端免密码登录\n\nssh的登录端口和监听设置配置文件：/etc/ssh/sshd_config\n\n\n~\n~\n\n\n\n#Port 22\n#ssh服务默认监听的端口\n\n\n#ListenAddress 0.0.0.0\n#ssh服务默认监听的IP地址\n\n\n==生产环境中只监听内网网卡的IP地址==\nssh的登录用户限制配置文件：/etc/ssh/sshd_config\n\n\n#PermitRootLogin yes\n#是否允许root用户使用ssh登录\n\n\n\n==不建议使用root用户远程登录==\nssh的登录超时设置配置文件：/etc/profile\n\n\n\nexport TMOUT=300\n#设置客户端5分钟无操作自动断开连接\n\n\n\n连接时不操作，自动断开\nssh登录失败尝试次数配置文件：/etc/ssh/sshd_config\n\n\n#MaxAuthTries 6\n#设置客户端登录失败尝试次数为6次\n\n\n\n预防暴力破解\n"},{"title":"Shell编程类","url":"/2020/07/03/Shell%E7%BC%96%E7%A8%8B%E7%B1%BB/","content":"cut -d “/“ -f 3用”/“作为分隔符,截取第三字段\nsort第一次排序\nuniq -c显示该行重复的次数\nsort -nr按照数值从大到小排序\n\n面试题使用循环在/Lavacy目录下创建10个txt文件,要求文件名称由6个随机小写字母加固定字符串 (_gg) 组成,例如pzjebg_gg.txt\n随机字符串生成\n/dev/urandom 不依赖系统中断生成随机字符串,生成数据速度快但数据随机性不足(一般使用/dev/urandom)\n\ntr命令\n可以对来自标准输入的字符进行替换、压缩和删除。它可以将一组字符变成另一组字符\n-c 取代所有不属于第一字符集的字符\n-d 删除所有属于第一字符集的字符\n#!&#x2F;bin&#x2F;bashif [ ! -d &#x2F;Lavacy ];then        mkdir &#x2F;Lavacyficd &#x2F;Lavacyfor ((i&#x3D;1;i&lt;&#x3D;10;i++))  do        filename&#x3D;&#96;tr -cd &quot;a-z&quot; &lt;&#x2F;dev&#x2F;urandom |head -c 6&#96;        touch $&#123;filename&#125;_gg.txtdone\n\n$RANDOM #此系统变量可以默认随机生成0-32767的数字\n\n\necho $RANDOM\n\n\n生成0-32767随机数\n\n\necho $(($RANDOM%100))\n\n\n生成100以内的随机数\n\n\n批量检查多个网站是否可以正常访问，要求使用shell数组实现，检测策略尽量模拟用户真实访问模式。\ncurl \n开源的用于数据传输的命令行工具。可以用于http访问，上传下载、用户认证、代理访问等。\n命令格式：curl 【选项】 url或者IP地址\n\n#!&#x2F;bin&#x2F;bashweb&#x3D;(  www.baidu.com  www.bilibili.com  10.12.7.13  www.zhihu.com)for i in $&#123;web[*]&#125;do        code&#x3D;&#96;curl -o &#x2F;dev&#x2F;null -s --connect-timeout 5 -w &#39;%&#123;http_code&#125;&#39; $i | grep -E &quot;200|302&quot;&#96;        if [ &quot;$code&quot; !&#x3D; &quot;&quot; ];then                echo &quot;$i is ok&quot; &gt;&gt;&#x2F;root&#x2F;ok.log        else                sleep 3                code&#x3D;&#96;curl -o &#x2F;dev&#x2F;null -s --connect-timeout 5 -w &#39;%&#123;http_code&#125;&#39; $i | grep -E &quot;200|302&quot;&#96;                if [ &quot;$code&quot; !&#x3D; &quot;&quot; ];then                        echo &quot;$i is ok&quot; &gt;&gt;&#x2F;root&#x2F;ok.log                else                        echo &quot;$i is error&quot; &gt;&gt;&#x2F;root&#x2F;error.log                fi        fidone\n"},{"title":"Hello World","url":"/2021/06/03/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new \"My New Post\"\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"如何进行Linux系统优化","url":"/2020/07/04/%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8CLinux%E7%B3%BB%E7%BB%9F%E4%BC%98%E5%8C%96/","content":"Linux系统优化策略禁用不需要的服务ntsysv命令最为方便\n避免直接使用root用户，普通用户通过sudo授权操作\n通过chattr锁定重要系统文件/etc/passwd/etc/shadow/etc/group/etc/gshadow/etc/inittab\n配置国内yum源，加快下载速度配置系统同时打开最大文件数vi /etc/profile\nulimit -SHn 65535\n同步时间服务器ntpdate ntp1.aliyun.com\n通过crond定时任务，让时间同步命令每五分钟执行一次\n更改ssh服务的默认端口，配置SSH秘钥对登录配置合理的iptables防火墙规则配置合理的SELinux安全上下文指定合理的监控策略定时备份系统重要文件"},{"title":"工作中常见的Apache优化策略","url":"/2020/07/01/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84Apache%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5/","content":"设置Apache的日志轮替和切割规则，防止日志文件过大美化错误页面，将错误页面重定向到首页或指定页面屏蔽Apache的版本等信息，防止别人获取Apache的相应版本配置静态缓存，减少对服务器的访问压力禁止解析指定目录下的页面程序，比如upload，禁止解析用户上传的脚本文件\n\n\n有哪些技术可以提高网站的安全和效率\nApache服务器的安全\nApache服务器的效率\n\n日志轮替利用apache自带的rotatelogs工具进行日志切割，保证单个日志文件不要太大CustomLog &quot;|&#x2F;bin&#x2F;rotatelogs -l &#x2F;wwwlogs&#x2F;access_%Y%m%d.log 86400&quot; combined\n\n\n美化错误页面可以将404 500 等错误信息页面重定向到网站首页或其他页面，提升用户体验vim httpd.confErrorDocument 404 http:&#x2F;&#x2F;www.a.com\n\n\n屏蔽apache版本等敏感信息开启子配置文件调用vim httpd.confInclude conf&#x2F;extra&#x2F;httpd-default.conf\n\n修改配置文件中默认显示的信息vim httpd-default.confServerTokens prod 显示 &quot;Server: Apache&quot;ServerTokens Major 显示 &quot;Server: Apache&#x2F;2&quot;ServerTokens Minjor 显示 &quot;Server: Apache&#x2F;2.2&quot;ServerTokens Min 显示 &quot;Server: Apache&#x2F;2.2.17&quot;ServerTokens OS 显示 &quot;Server: Apache&#x2F;2.2.17 (Unix)&quot;ServerTokens Full 显示 &quot;Server: Apache&#x2F;2.2.17 (Unix) PHP&#x2F;5.3.5&quot;\n\n配置静态缓存此模块默认未启用，请手动启动此模块一般写到指定的某一个网站标签中vim httpd.conf&lt;IfModule mod_expires.c&gt;    ExpiresActive on    ExpiresByType image&#x2F;gif &quot;access plus 1 days&quot;    ExpiresByType image&#x2F;jpeg &quot;access plus 24 hours&quot;    ExpiresByType image&#x2F;png &quot;access plus 1 days&quot;    ExpiresByType text&#x2F;css &quot;now plus 2 hours&quot;    ExpiresDefault &quot;now plus 0 min&quot;&lt;&#x2F;IfModule&gt;\n\n禁止解析PHP新增目录权限标签vim httpd.conf&lt;Directory &quot;&#x2F;www&#x2F;a.com&#x2F;uploads&quot;&gt;    Options FollowSymLinks    AllowOverride None    Order allow,deny    Allow from all    php_flag engine off&lt;&#x2F;Directory&gt;\n"},{"title":"磁盘阵列Raid的特点与原理","url":"/2020/07/04/%E7%A3%81%E7%9B%98%E9%98%B5%E5%88%97Raid%E7%9A%84%E7%89%B9%E7%82%B9%E4%B8%8E%E5%8E%9F%E7%90%86/","content":"Raid 0 (独立磁盘冗余阵列)\n必须使用两块或两块以上硬盘组成\n每块硬盘的大小必须一致\n是所有动态磁盘中,数据读写最快的\n损坏几率相对最高\n没有磁盘容错功能\n\n\n\nRaid 1 (镜像阵列)\n由两块或2的倍数硬盘组成\n每块硬盘大小必须一致\n硬盘使用率只有50%，写入速度最慢\n拥有磁盘容错功能\n\nRaid 5 （奇偶校验）\n由三块或者三块以上硬盘组成\n每块硬盘大小必须一致\n磁盘利用率是n-1块盘\n利用奇偶校验，拥有磁盘容错功能个（==只支持一块硬盘损坏==）\n\n\n相关面试题简述Raid 6 、Raid 10的特点与原理\n==Raid== 6\nRaid 6 是Raid 5 的增强版\n由4块或以上硬盘组成\n每块硬盘大小必须一致\n磁盘利用率是n-2块盘\n支持磁盘容错，可以支持2块硬盘损坏\n\nRaid 10\n必须有4块等大小的硬盘组成\n两两硬盘先组成Raid 1，再组成Raid 0\n兼顾Raid 0 和Raid 1的特点，中和两种Raid的特点\n\n软Raid与硬Raid的区别？\n\n软Raid：是由操作系统模拟的Raid，一旦硬盘损坏，操作系统就会损坏，Raid会丧失作用\n硬Raid：是由独立于硬盘之外的，硬件Raid卡组成；就算硬盘损坏，也不会导致Raid卡损坏，磁盘容错才能起作用\n\n"},{"title":"简述Linux启动过程","url":"/2020/07/04/%E7%AE%80%E8%BF%B0Linux%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/","content":"CentOS 6.X基本启动过程\n服务器加点，加载BIOS信息，BIOS进行系统检测\n加载启动引导程序（grub）\n由grub加载系统内核\n系统内核重新自检，并加载硬件驱动\n由内核启动系统第一个进程/sbin/init\n由/sbin/init进程调用/etc/init/rcS.conf，进行系统初始化配置\n由/etc/init/rcS.conf调用/etc/inittab，确定系统的默认运行级别\n确定默认运行级别后，调用/etc/init/rc.conf配置文件\n运行相应的运行级别目录/etc/rc[0-6].d中的脚本\n在启动登录界面之前，执行/etc/rc.d/rc.local中的程序\n\n\n\nCentOS 7.x基本启动过程\n服务器加电。加载BIOS信息，BIOS进行系统检测\n\n加载启动引导程序（grub2）\n\n由grub2加载系统内核，内核重新自检\n\n由grub2加载inintamfs虚拟文件系统\n\n内核初始化，以加载动态模块的形式加载部分硬件的驱动\n\n内核启动系统的第一个进程，也就是systemd\n\nsystemd开始调用默认单元组（default.target），并按照默认单元组开始运行子单元组\n\nsystemd调用sysinit.target单元组，初始化系统\n\nsystemd调用basic.target单元组，准备操作系统\n\nsystemd调用multi-user.target单元组，启动字符界面所需程序\n\nsystemd调用multi-user.target单元组中的/etc/rc.d/rc.local文件，执行文件中的命令\n\nsystemd调用multi-user.target单元组中的getty.target单元组，初始化本地终端（tty）及登录界面，如果是字符界面启动，到此启动完成\n\n\n"},{"title":"简述Linux权限划分原则","url":"/2020/07/03/%E7%AE%80%E8%BF%B0Linux%E6%9D%83%E9%99%90%E5%88%92%E5%88%86%E5%8E%9F%E5%88%99/","content":"解题思路：\n注意权限分离（Linux系统权限、数据库权限不要掌握在同一个部门）\n权限在满足使用的情况下，最小优先\n减少使用root用户，尽量用“普通用户 + sudo提权” 进行日常操作\n重要系统文件，如：/etc/passwd、/etc/shadow、/etc/fstab、/etc/sudoers等，日常建议使用chattr锁定，需要操作时再打开\n使用脚本检测系统中新增的SUID、SGID文件\n可以利用工具（如chkrootkit等）检测rootkit脚本\n开启SSH服务秘钥对登录，修改SSH服务端口\n\n"},{"title":"简述TCP三次握手的过程","url":"/2020/07/05/%E7%AE%80%E8%BF%B0TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%9A%84%E8%BF%87%E7%A8%8B/","content":"TCP包头作用序号：Seq序号，占32位，用来标识从TCP源端向目的端发送的字节流，发起方发送数据时对此进行标记确认号：Ack序号，占32位，只有Ack标志位为1时，确认序号字段才有效，Ack=Seq=1标志位:\n共6个,即URG、ACK、PSH、RST、SYN、FIN等，具体含义如下；\nURG：紧急指针有效\n==ACK==：确认序号有效\nPSH：接收方应该尽快将这个报文交给应用层\nRST：重置连接\n==SYN==：发起一个新连接\n==FIN==：释放一个连接\n\n三次握手\n三次握手的本质是确认通信双方收发数据的能力\n首先，我让信使运输一份信件给对方，对方收到了，那么他就知道了我的发件能力和他的收件能力是可以的。\n于是他给我回信，我若收到了，我便知我的发件能力和他的收件能力是可以的，并且他的发件能力和我的收件能力是可以。\n然而此时他还不知道他的发件能力和我的收件能力到底可不可以，于是我最后回馈一次，他若收到了，他便清楚了他的发件能力和我的收件能力是可以的。\n这，就是三次握手，这样说，你理解了吗？\n\n上面是通俗的表达，下方高能注意护眼模式：\n第一次握手：客户端要向服务端发起连接请求，首先客户端随机生成一个起始序列号seq，那客户端向服务端发送的报文段包含SYN标志位(也就是SYN=1)，序列号seq=100。客户端进入SYN_SENT状态，等待服务端确认。\n第二次握手：服务端收到客户端发过来的报文后，发现SYN=1，知道这是一个连接请求，于是将客户端的起始序列号100存起来，并且随机生成一个服务端的起始序列号(比如是300)。然后给客户端回复一段报文，回复报文包含SYN和ACK标志(也就是SYN=1,ACK=1)、序列号seq=300、确认号ack=101(客户端发过来的序列号+1)。服务端进入SYN_RCVD状态\n第三次握手：客户端收到服务端的回复后发现ACK=1并且ack=101,于是知道服务端已经收到了序列号为100的那段报文；同时发现SYN=1，知道了服务端同意了这次连接，于是就将服务端的序列号300给存下来。然后客户端再回复一段报文给服务端，报文包含ACK标志位(ACK=1)、ack=301(服务端序列号+1)、seq=101(第一次握手时发送报文是占据一个序列号的，所以这次seq就从101开始，需要注意的是不携带数据的ACK报文是不占据序列号的，所以后面第一次正式发送数据时seq还是101)。当服务端收到报文后发现ACK=1并且ack=301，就知道客户端收到序列号为300的报文了，就这样客户端和服务端通过TCP建立了连接。\n\n\n类似面试题\n简述TCP包头的内容？主要几个内容：源端口、目的端口、序列号Seq、确认号Ack、标志位、校验和、数据\n简述TCP四次挥手的过程？第一次挥手：客户端发送一个标志位为FIN包，Seq序号=m，用来关闭客户端到服务端的数据传送，客户端进入FIN_WAIT_1状态。第二次挥手：服务端收到标志位FIN包后，发送一个标志位ACK给客户端，Ack确认序号为m+1，服务端进入CLOSE_WAIT状态。第三次挥手：服务端发送一个标志位FIN=1,ACK=1,Seq序号=n，Ack确认号为m+1，用来关闭服务端到客户端的数据传送，服务端进入LAST_ACK状态。第四次挥手：客户端收到FIN后，客户端进入TIME_WAIT状态，接着发送一个ACK标志给服务端，Ack确认序号=n+1，服务端进入CLOSED状态，完成四次挥手\n\n"},{"title":"简述备份策略","url":"/2020/07/03/%E7%AE%80%E8%BF%B0%E5%A4%87%E4%BB%BD%E7%AD%96%E7%95%A5/","content":"如果一个系统没有任何的备份策略，请写出一个较为全面合理的备份方案？需要备份的内容\n /etc/\n /home/\n /root/\n /var/spool/mail/\n /var/spool/cron/\n /var/spool/at/\n\n网络服务数据\nMySQL数据库RPM包安装的MySQL：/var/lib/mysql/源码包安装的MySQL: /usr/local/mysql/data\nApache服务网站内容: /var/www/html         /usr/local/apache2/htdocs/配置文件: /etc/httpd/conf/httpd.conf            /usr/local/apache2/conf/httpd.conf日志文件: /var/log/httpd/       /usr/local/apache2/logs/\n备份策略\n完整备份\n增量备份\n差异备份\n\n备份频率\n实时备份\n定时备份\n\n备份存放位置基本原则:不要把鸡蛋放在同一个篮子里\n\n本地备份\n异地备份\n\n\n类似面试题网站服务器每天产生的日志量较大,请问如何备份?日志是文本文件,假如一天20万PV的网站就会产生200MB的日志,打开已经非常卡了.\n日志的切割与轮替系统日志管理工具:logrotate\n日志切割\n日志轮替\n\nApache服务配置文件自带日志切割功能,但是需要通过脚本进行轮替"}]